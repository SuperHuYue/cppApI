##############################################################################################################################
#此文件脱胎自Professional Cmake一书，表述各个函数以及各个参数的基本用法
#
#
#
##############################################################################################################################





##############################################################################################################################
设置normal Variable, 该变量仅仅会在CMakeLists中生效
#变量无需再使用之前进行声明，为声明的变量进行使用不会报错，会以空字符串进行代替
#不带空格的名称无需用引号扩起，如果出现多个value那么中间的空格将会变成“；”
#PARENT_SCOPE----->假设CMakeList.tx为多层级的（里面存在add_subdirectory（）..）, 使用PARENT_SCOPE即在其父scope定义varname且名称为value，如果父scope已经存在该varname则修改父scope的内容
set(varname value...[PARENT_SCOPE]) 
# 这种set variable 的方式仅仅只在当前的CMakeLists中生效
# set(USER hello)
# #在[[]]或者[=...[ ]=...]之中包裹的对象不会再进行substitution以及escaping, 简单理解就是-----原样输出
 set(a [[ 
 "${USER} World...."
 ]]
 )#输出   "${USER} World...."
# set(b "\"${USER} World....\"") #没有包裹在[[表达式之中引号需要加入\号，同时变量会进行替换  输出"hello World...."
##############################################################################################################################
 设置cache variable ，该变量会放置在CMakeCache中，整个build过程都会生效
 set(varName value... CACHE type "docstring" [FORCE])
# CACHE 关键字代表生成CACHEVARIABLE
# type和docstring仅仅是用来给CMAKE-GUI的提示标记,docstring是鼠标悬浮其上的提示
 option(optvar helpstring [initialValue])  等价于set(optvar initialValue CACHE BOOL helpstring)但是更加的清晰和直接
# 注意:倘若normal Variable 和 Cache Variable存在同名变量，那么在时候第一次会显示Cache第二次以后会使用normal
#set(trafficLight Green CACHE STRING "Status of something")
mark_as_advanced(CLEAR trafficLight) #gui仅会显示no-advance变量 clear表达no-advance，FORCE代表Advance
#set_property(CACHE trafficLight PROPERTY STRINGS Red Orange Green) #更改gui上的显示
########################################################################################################################################
查找字符串 string(FIND inputString subString outVar [REVERSE]) 
#set(longstr adcdefabcdef)
#set(shortbit def)
#string(FIND ${longstr} ${shortbit} fwdindex)
string(FIND ${longstr} ${shortbit} revindex REVERSE)
#message("fwdindex = ${fwdindex}, revindex = ${revindex}"    #输出fwdindex = 3,revIndex=9
替换字符串 string(REPLACE matchString replaceWith outVar input [intput....]) #注意多个input输入系统会将其利用没有分隔符的记号连接起来在做替换，这样的作法可能造成意想不到的后果，故建议不要多个input一起输入
string(REPLACE c YES output ${longstr}) #输出abYESDEFABYESdef 
正则字符串查找
string(REGEX MATHCH regex outVar input [input...]) #查找input中第一个匹配(regex规则)并且存在outVAr中
string(REGEX MATCHALL regex outVar input [input...]) #查找input中所有的匹配(regex规则)并且以列表的形式存在outVAr中
string(REGEX REPLACE regex replaceWith outVar input [intput...])
#ex: set(longstr adcdefabcdef)
#ex：string(REGEX MATCHCALL "[ace]" matchVar ${longstr}) #输出： a;c;e;a;c;e x
#ex：string(REGEX REPLACE "([de])" [[x\1Y]] replVar ${longstr}) #abcXdYXeYfabcXdYXeYf
提取子字符串
string(SUBSTRING input index length outVar) #在input中从index起提取length长度的字符串存入outVar中 （length= -1 则提取后面所有）
-----
string(LENGTH input outVar)       #获取字符串长度
string(TOLOWER input outVar)      #转换为小写        
string(TOUPPER input outVar)      #转换为大写
string(STRIP input outVar)        #左右两边移除空
#还包含字符比较，哈希，时间撮等操作--->用的较少，阅读文档
################################################################################################################################################################################
Lists 列表   ---------------列表就是一串被分号将item分隔的字符串
#第一个参数代表需要操作的类型， 第二个参数代表需要操作的对象（必修是变量）
#所有传入索引均可以为负值，代表从后往前的索引
List(LENGTH listVar outVar)                 #获取列表长度
list(GET listVar index [index...] outVar)   #获取固定索引的内容
list(APPEND listVar item [item...])         #将item append到list的末尾
list(INSERT listVar index item [item...])   #将item insert到list的index处
list(FIND mylist value outVar)              #找到mylist中的匹配value的项，并返回outVAr（索引）
list(REMOVE_ITEM myList value [value...])   #将value从mylist中移除
list(REMOVE_AT myList index [index...])     #将value处于index索引中的内容移除
list(REMOVE_DIPLICATES myList)              #祛除重复项目
list(REVERSE mylist)                        #反向排列list
list(SORT myList)                           #排序（依照alphabetical）

# Example
# set(myList a b c)              #creates the list "a;b;c"
# list(LENGTH myList len)        #len = 3
# list(GET myList 2 1 letters)   #c;b
#
############################################################################################
math 操作
math(EXPR outVar mathExpr) ---EXPR(必加参数)，outvar--输出数值   mathExpr----数学表达式
#   set(x 3)
#   set(y 7)
#   math(EXPR z "(${x} + ${y}) / 2")   #z = 5
############################################################################################
Logic Operations
if(NOT expression)
if(expression1 AND expression2)
if(expression1 OR expression2)
#ex: if(NOT (expression1 AND (expression2 OR expression3)))
comparison test 
if(value1 OPERATOR value2) #OPERATOR 可以为LESS GREATER.....等等，分为numeric， string， version三类，具体查表
正则匹配
if(value MATCHES regex) #匹配成功的项目将会存于CMAKE_MATCH_<n>中，其中0是整个匹配的字符串
# ex: if("Hi from ${who}" MATCHES "Hi from (Fred|Barney).*)
#          message("${CMAKE_MATCH_1} says hello")
#     endif()
FileSystem Tests 
#if(EXISTS pathToFileOrDir) #
#if(IS_DIRECTORY pathToDir)
#if(IS_SYMLINK fileName)
#if(IS_ABSOLUTE path)
#if(file1 IS_NEWER_THAN file2)
Existence Tests 
if(DEFINED name)   #检查name是否存在，存在返回true
#ex:if(DEFINED SOMEVAR)          #checks for a CMake variable
#   if(DEFINED ENV{SOMEVAR})     #checks for an environmental variable
if(COMMAND name)                #checks for CMake command,function,macro with specified name exists
if(POLICY name)                 #checks for whether a particular policy is known to cmake
if(TARGET name)                 #checks for Cmake target exists (defined by add_excutable,add_libray..)
if(TEST name)                   #check for name whether is defined by the command add_test()
#############
foreach 循环
foreach(loopvar RANGE start stop [step])
foreach(loopvar range value) #等价于foreach(loopvar RANGE 0 value)
foreach(loopvar IN [LISTS listVar1 ...] [ITEMS item1 ...])
    #....
endforeach() 
#set(list1 A B C D)
#set(list2)                            #允许为空
#set(list3 E F G)
#set(foo willonbeshown)
#foreach(loopvar IN LISTS list1 list2 list3 ITEMS foo bar) #对item
#   message("Iteration for: ${loopvar}") 
#endforeach()
##############################################################################################################################################################################################################
while 循环
while(condition)
    #...
endwhile()
跳出循环
break()
continue()
#############################################################################################################################################################################################################
#add_subdirectory()会开辟一个child scope这个scope有如下特点（调用add_subdirector()的CMakeList.txt的空间称为calling scope， 其指向的空间成为child_scope)
# 1.定义在calling scope空间中的变量在子空间中均可见。
# 2.child scope中定义的*变量*（与target区分开来）在calling scope中不可见
# 3.任何在child scope中的变化仅仅只在该子空间中有效。
# 4.child scope与calling scope property在正常情况下互不干扰
add_subdirectory(sourceDir [binaryDir] [EXLUDE_FROM_ALL]) #将另外一个dir导入build之中，该build必须有自己的CMakelist.txt
############################################################################################################################################################################################################
#include()与add_subdirectory()相似，但有如下不同
# 1.include()输入的是一个filename(一般情况带.cmake后缀,但其可以为任何数据)而不是dir
# 2.include()不会产生新的variable scope
# 3.include() 和 add_sub_directory()都会引入新的policy scope, 但是include可以通过给如NO_POLITY_SCOPE选项去禁止产生新的polity scope，add_subdirectory()无法做到这一点
# 4.CMAKE_CURRENT_SOURCE_DIR和CMAKE_CURRENT_BINARY_DIR 在include()函数使用时不会改变。而add_subdirectory()会
# 针对第四个属性产生的问题，CMAKE给出了三个新的变量去解决，分别为CMAKE_CURRENT_LIST_DIR、CMAKE_CURRENT_LIST_FILE、CMAKE_CURRENT_LIST_LINE
include(fileName [OPTIONAL] [RESULT_VARIABLE myVar] [NO_POLITY_SCOPE])
include(module [OPTIONAL] [RESULT_VARIABLE myVar] [NO_POLITY_SCOPE])
##########################################################################################################################################################################################################
return() #跳出处理scope，并不能返回值仅仅是将当前的处理scope结束
##########################################################################################################################################
函数与宏
#不同点：
#1.参数上：函数中传入的为Variable，可以使用if(DEFINED varName)进行检验，但是macro为单纯的宏命令替换，传入的为string，无法做到这一点
#2.scope:function引入了新的Variable scope（没有引入新的policy socpe） 而Macro没有
#
#特点:1.参数大小写敏感
#     2.除了定义的参数名称之外，function和macro还有一些自动定义的变量
#      ARGC:输入参数的总数，是有名参数和无名参数的总和
#     ex: {
#            function(func arg)
#            message(${ARGC}......)   输出2
#             message(${ARGV1})       #可以通过ARGV..用来索引输入的内容
#            foreach(loopvar IN LISTS arg)
#                message(${loopvar})  输出1，证明当输入多余函数参数的时候不会产生list，而是将多出的部分变为无名变量
#            endforeach(loopvar in)
#            endfunction(func arg)
#
#            func(1 2) 给出的参数为1，2但是该函数仅仅只接受一个参数(arg:1)另外一个参数变为无名参数，注意，经过foreach测试，不会产生一个list变量
#          }
#          
#        {
#             macro(func arg)
#                message("macro in ${ARGC}......")
#                message(${ARGV2})  #可以用ARGV...来索引输入的参数
#                list(LENGTH ARGV out)
#                foreach(loopvar IN ITEMS ${ARGV}) 注意与function的foreach遍历的差别，原因是应为在macro中ARGV为string类型而不是变量，所以不应该将其放置于需要给入变量的IN LISTS中，否则其会被当做变量进行处理，从而产生异常结论
#                    message(${loopvar})
#                endforeach()
#            endmacro()
#        }
#       ARGV:list variable包含了所有传入函数的参数(named and unnamed)，如果将上式LISTS后的arg变成ARGV，那么就可以输出对应的输入参数
#       ARGN:与ARGV差不多，不同点在于，其仅仅是包含了unnamed arguments(ex:option unnamed ones)
#     3.不支持返回值，function可以通过set()的parent scope向他的父亲进行参数传递
#
#
function(name [arg1 [arg2 [...]]])
    #Function body(i.e. commands)....
endfunction()

macro(name [arg1 [arg2 [...]]])
    #Macro body(i.e commands).....
endmacro()
##############################################################################################
keyword arguments 函数和宏的高端定义方式
include(CMakeParseArguments) #Needed only for CMake 3.4 and earlier
cmake_parse_arguments(
    prefix                     #代表需要输出内容的前缀，检测出来的内容都会加上prefix_xxx
    noValueKeywords            #需要检测的无参数类型的关键字，实际传入参数如果有，那么prefix_xxxx将会为真
    singleValueKeywords        #需要检测的有一个参数的关键字
    multiValueKeywords         #需要检测的有多个参数的关键字
    argsToParse                #待传入的无名参数---一一般为${ARGN}
) 
#ex:
#    function(func)
#        #Define the supported set of keywords
#        set(prefix ARG)
#        set(noValues ENABLE_NET COOL_STUFF)
#        set(singleValues TARGET)
#        set(multiValues SOURCES IMAGES)
#
#        #Process the arguments passed in
#        include(CMakeParseArguments)
#        cmake_parse_arguments(${prefix}
#                              "${noValues}" #don't forget the ""
#                              "${singleValues}"
#                              "${multiValues}"
#                              ${ARGN})
#        #Log details for each supported keyword
#
#        message("Option summary:")
#        foreach(arg IN LISTS noValues)
#            if(${${prefix}_${arg}})      #被解析出来的参数都须加入prefix_头进行索引
#                message(("   ${arg} enabled")) #novalue不为空则输入中存在这个参数
#            else()
#                message("   ${arg} disabled")
#        endforeach()
#        foreach(arg IN LISTS singleValues multiValues)
#            #Single argument values will print as a simple string
#            #Multiple argument values will print as a list
#            message("   ${arg} = ${${prefix}_${arg}}") #ex：TARGET=myAPP SOURCES=foo.cpp;bar.cpp
#        endforeach()
#    endfunction()
#    #Examples of calling with different combinations of keyword arguments
#    func(SOURCES foo.cpp bar.cpp TARGET myApp ENABLE_NET)
#    func(COOL_STUFF TARGET dummy IMAGES here.png there.png gone.png)
#
#    输出:
#    Option summary:
#        ENABLE_NET enabled
#        COOL_STUFF disabled
#        TARGET = myApp
#        SOURCES = foo.cpp;bar.cpp 
#        IMAGES = #输入参数中没有该选项的，则对应内容为空
#
#    Option summary:
#        ENABLE_NET disabled
#        COOL_STUFF enabled
#        TARGET = dummy
#        SOURCES =
#        IMAGES = here.png;there.png;gone.png 
overridding commands 关于相同函数名称的一些说法 p76
###############################################################################################################
General Property Commands  P79
set_property(entitySpecific                  #决定哪一些对象的属性将会被设定
            [APPEND][APPEND_STRING]
            PROPERTY propName [value1 [value2 [...]]])

get_property(resultVar entitySpecific
            PROPERTY propName
            [DEFINED | SET |BRIEF_DOCS | FULL_DOCS] 

define_property(entityType
               PROPERTY proName [INHERITED]
               BRIEF_DOCS briefDoc [moreBriefDocs...])
               FULL_DOCS fullDoc [moreFullDocs...]
########################################################################################################    
Global Properties 全局属性
#全局属性影响这个build过程，决定了编译工具以及各方面的表现（从工程文件的组成到各个程度的构建过程）
#resultVar: 保存了需要返回的属性内容
#property：可以是任务全局属性名称以及下列pseudo properties(如下的指令并不能被get_property索引)：
# 1.VARIABLES: return a list of all regular(ex:non-cache) variables
# 2.CACHE_VARIABLES: return a list all cache variables
# 3.COMMANDS:返回所有定义了的commands, functions and macros（包括自定义的和CMAKE predefined的）
# 4.MACROS：返回所有macros，是3的子集，注意返回的大小写可能与定义的不同
# 5.COMPONENTS: Return a list of all components defined by install() commands.
get_cmake_property(resultVar property)
####################################################################################################################################
Directory Properties 目录属性 P8 3 
set_directory_properties(PROPERTIES prop1 val1 [prop2 val2 ...]) #获得current directory的属性
get_directory_property(resultVar [DIRECTORY dir] property)
get_directory_property(resultVar [DIRECTORY dir] DEFINITION varName)
####################################################################################################################
Target Properties 目标属性
#掌控这如何将source file 转变成 binaries的规则
set_target_properties(target1 [target2...]
                    PROPERTIES 
                    propertyName1 value1
                    [propertyName2 value2]...)

get_target_property(resultVar target propertyName)
########################################################################################################################
Source Properties 源属性
#用于给单个的源文件定义属性 注意：源属性仅仅在定义该文件的directory scope中可见
set_source_files_properties(file1 [file2 ...]
                            PRPPERTIES 
                            propertyName1 value1
                            [propertyName2 value2]...)
get_source_file_property(resultVar sourceFile propertyName)
################################################################################################################################################
Cache Variable Properties 
#################################################################################################
other property types 
#测试属性
set_tests_properties(test1 [test2...]
                    PROPERTIES
                    propertyName1 value1
                    [propertyName2 value2]...)
get_test_property(resultVar test propertyNam)
#####################################################################################################
Generator Expressions 生成表达式
#大部分的变量都是在configuration时期被确定，而生成表达是则是会在Generation过程中才会被确定
生成表达格式$<....> 其中，尖括号之间的内容有多种不同的表现形式
性质：生成表达是是允许内嵌的
####
# 1.simple bolean logic 简单布尔逻辑,处理0与1的逻辑
$<1:...>  表达式的结果将会是...部分
$<0:...>  ...部分的内容将会被忽略表现形式为一个空的字符串
$<BOOL:...>  将会替换任何CMake认为是false的值到0，其他的内容到1--->这一特性会用在上面写入的两种表达之中（应为仅仅支持如此）
$<AND:expr[,expr...]>  用与运算判断用，隔开的expr，输出0或者1   注意：由于其输出为0或者1，所以该式expr需要用$<BOOL:...>进行包含
$<OR:expr[,expr...]>   用或运算判断用，隔开的expr，输出0或者1   注意：由于其输出为0或者1，所以该式expr需要用$<BOOL:...>进行包含
$<NOT:expr>   返回表达式的负性结果
$<IF:expr,val1,val0>  判断expr如果正确则为var1否则为var0  ,only supported CMake3.8 and later
#ex:
#1.$<1:foo>                         ------------->foo
#2.$<0:foo>                         ------------->空
#3.$<true:foo>                      ------------->错误，必须为0或者1
#4.$<$<BOOL:true>:foo>              ------------->foo
#5.$<$<NOT:0>:foo>                  ------------->foo
#6.$<$<NOT:1>:foo>                  ------------->空
#7.$<$<NOT:true>:foo>               ------------->错误，NOT需要0或者1的输入
#8.$<$<AND:1,0>:foo>                ------------->空
#9.$<$<OR:1,0>:foo>                 ------------->foo
#10.$<1:$<$<BOOL:false>:foo>>       ------------->空
#11.$<IF:$<BOOL:${foo}>,yes,no>     ------------->最终结果去接与foo的取值
字符串，数字，版本比较,符合返回1、否则返回1
$<STREQUAL:string1,string2>
$<EQUAL:number1,number2>
$<VERSION_EQUAL:version1,version2>
$<VERSION_GREATER:version1,version2>
$<VERSION_LESS:version1,version2>
#############################################################################################################
检测buildtype:
$<CONFIG:arg>   如果arg与当前的buildtype一致，那么会输出1，否则为0
#ex:debug type将会链接checkedAlgo库，其他的build type将会链接fastAlgo库
# add_executable(myApp src1.cpp src2.cpp)
# #before CMake 3.8
# target_link_libraries(myApp PRIVATE
#                      $<$<CONFIG:Debug>:checkedAlgo>
#                      $<$<NOT:$<CONFIG:Debug>>:fastAlgo>)  
# #CMake 3.8 or later allows a more concise form
# target_link_libraries(myApp PRIVATE
#             $<IF:$<CONFIG:Debug>,checkedAlgo,fastAlgo>)





