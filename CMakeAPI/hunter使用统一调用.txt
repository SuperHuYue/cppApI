cmake_minimum_required(VERSION 3.12)
#cmake_policy(VERSION 3.12)


#######################################################
#安装依赖
#使用conan下载配置文件
if(NOT EXISTS "${CMAKE_BINARY_DIR}/HunterGate.cmake")
  message(STATUS "Download HunterGate.cmake script")
  file(DOWNLOAD "https://raw.githubusercontent.com/hunter-packages/gate/master/cmake/HunterGate.cmake"
                "${CMAKE_BINARY_DIR}/HunterGate.cmake"
       SHOW_PROGRESS STATUS zStatus)
  list(GET zStatus 0 sStatusCode)
  if(NOT sStatusCode EQUAL 0)
    file(REMOVE "${CMAKE_BINARY_DIR}/HunterGate.cmake")
    list(GET zStatus 1 sStatusText)
    message(FATAL_ERROR "Download HunterGate.cmake script failed: ${sStatusText}")
  endif()
  message(STATUS "Download HunterGate.cmake script - done")
endif()
include("${CMAKE_BINARY_DIR}/HunterGate.cmake")

set(HUNTER_ROOT_POS "${CMAKE_BINARY_DIR}/source") #设置依赖根目录
if(NOT EXISTS ${HUNTER_ROOT_POS})
  file(MAKE_DIRECTORY ${HUNTER_ROOT_POS})
  message(STATUS "NEW DIRECTORY CREATED...")
endif()
set(HUNTER_ROOT ${HUNTER_ROOT_POS}) #将依赖文件设置到具体的目录下，而不是默认值(前提，该目录必须存在，否则又会在默认路径下创建)

HunterGate(
  URL "https://github.com/ruslo/hunter/archive/v0.23.204.tar.gz"
  SHA1 "32cfed254da901f6f184027d530d8da47e035b85"
)

set(PROJECT_NAME testhunter)
project(${PROJECT_NAME}) #顺序不允许改
########################################################
#add jsoncpp all is like this

hunter_add_package(jsoncpp)

find_package(jsoncpp CONFIG REQUIRED)

add_executable(${PROJECT_NAME} main.cpp)

if(${HUNTER_jsoncpp_VERSION} VERSION_LESS 1.0.0)
  target_link_libraries(${PROJECT_NAME} jsoncpp_lib)
else()
  target_link_libraries(${PROJECT_NAME} jsoncpp_lib_static)
endif()
#end
##############################################################警告视为错误
if(MSVC)
  add_compile_options("/W4" "/WX")
  if(1910 VERSION_LESS_EQUAL MSVC_VERSION)
    add_compile_options("/utf-8")
  endif()
else()
  add_compile_options("-Wall" "-Werror" "-fvisibility=hidden")
endif()
###############################################################
#设置windows平台下的的调试工作路径
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin) #设置工程文件的输出路径
if (CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
  message(STATUS "Set Work Directory...")
  set_target_properties(${PROJECT_NAME} PROPERTIES VS_DEBUGGER_WORKING_DIRECTORY ${EXECUTABLE_OUTPUT_PATH}/${CMAKE_CFG_INTDIR})
endif()
################################################################
set_target_properties(
  ${PROJECT_NAME}
  PROPERTIES CXX_STANDARD          17
             CXX_STANDARD_REQUIRED ON)#设置语法标准
##############################################################
#设置安装@包含部分需要自己更改
Install(TARGETS @from_what RUNTIME DESTINATION @ToPlace) #安装目标
INSTALL(FILES @COPYRIGHT README.md DESTINATION @share/doc/cmake/hello-world-clear) #安装文件
INSTALL(PROGRAMS @runhello.sh DESTINATION @bin) #
INSTALL(DIRECTORY @doc/ DESTINATION @share/doc/cmake/hello-world-clear)#将目录中的内容安装到目标位置
##############################################################